import pandas as pd
import numpy as np
df=pd.read_csv("/content/homeprices_banglore.csv")
df.head(5)
from sklearn.preprocessing import MinMaxScaler
sx=MinMaxScaler()
sy=MinMaxScaler()
scaled_X=sx.fit_transform(df.drop("price",axis="columns"))
scaled_y=sy.fit_transform(df["price"].values.reshape(df.shape[0],1))
def batch_gradient_descent(X,y_true,epochs,learning_rate=0.01):
  number_of_features=X.shape[1]
  w=np.ones(shape=(number_of_features))
  b=0
  total_samples=X.shape[0]
  cost_list=[]
  epoch_list=[]
  for i in range(epochs):
    y_predicted=np.dot(w,scaled_X.T)+b
    w_grad=-(2/total_samples)*(X.T.dot(y_true-y_predicted))
    b_grad=-(2/total_samples)*np.sum(y_true-y_predicted)
    w=w-learning_rate*w_grad
    b=b-learning_rate*b_grad

    #mean square error
    cost=np.mean(np.square(y_true-y_predicted))
    #because we will be drawing graphs we have to record our epochs after ten iteration 
    if i%10==0:
      cost_list.append(cost)
      epoch_list.append(i)

  return w,b,cost,cost_list,epoch_list

w,b,cost,cost_list,epoch_list=batch_gradient_descent(scaled_X,scaled_y.reshape(scaled_y.shape[0],),500)
w,b,cost
#we can now create a prediction function using our codes above 
def predictions(area,bedrooms,w,b):
  scaled_X=sx.transform([[area,bedrooms]])[0]
  price_scaled=w[0]*scaled_X[0]+w[1]*scaled_X[1]+b
  #we reverrse transform our scaled price
  real_price=sy.inverse_transform([[price_scaled]])
  return real_price
predictions(2000,5,w,b)
from matplotlib import pyplot as plt
%matplotlib inline
plt.plot(epoch_list,cost_list)
plt.xlabel("Epochs")
plt.ylabel("Cost")
plt.title("Batch gradient descent")


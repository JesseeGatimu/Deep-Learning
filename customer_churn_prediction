import pandas as pd

df=pd.read_csv("/content/Churn_Modelling.csv")

df.head(5)

df=df.drop(["RowNumber","CustomerId","Surname"],axis=1)
df.head(5)

df['Gender'].replace({'Female':1,'Male':0},inplace=True)
df.head(5)

df1=pd.get_dummies(data=df,columns=["Geography"]).astype(int)
df1.head(5)

print(df1.isnull().sum().sum())  

from sklearn.preprocessing import MinMaxScaler
scaling_columns=["CreditScore","Age","Tenure","Balance","EstimatedSalary"]
scaler=MinMaxScaler()
df1[scaling_columns]=scaler.fit_transform(df1[scaling_columns])

from sklearn.model_selection import train_test_split
X=df1[['CreditScore','Gender','Age','Tenure','Balance','NumOfProducts','HasCrCard','IsActiveMember','EstimatedSalary','Geography_France','Geography_Germany','Geography_Spain']].values
y=df1["Exited"].values
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)

X_train.shape

df1.dtypes

import tensorflow as tf
from tensorflow import keras

model=keras.Sequential([
    keras.layers.Dense(16,input_shape=(12,),activation="relu"),
    keras.layers.Dense(4,activation="relu"),
    keras.layers.Dense(1,activation="sigmoid")

])
model.compile(
    optimizer="adam",
    loss="binary_crossentropy",
    metrics=["accuracy"]
)

model.fit(X_train,y_train,epochs=800)


model.evaluate(X_test,y_test)

y_pred=model.predict(X_test)

y_pred[:20]

y_test[:20]

y_predicted = []
for element in y_pred:
    if element > 0.5:
        y_predicted.append(1)
    else:
        y_predicted.append(0)

y_predicted[:20]

from sklearn.metrics import confusion_matrix , classification_report

print(classification_report(y_test,y_predicted))

import matplotlib.pyplot as plt
import seaborn as sn
cm = tf.math.confusion_matrix(labels=y_test,predictions=y_predicted)

plt.figure(figsize = (10,7))
sn.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')

import pandas as pd
import numpy as np
df=pd.read_csv("/content/homeprices_banglore.csv")
df.head(5)
from sklearn.preprocessing import MinMaxScaler
sx=MinMaxScaler()
sy=MinMaxScaler()
scaled_X=sx.fit_transform(df.drop("price",axis="columns"))
scaled_y=sy.fit_transform(df["price"].values.reshape(df.shape[0],1))
#stochastic gradient descent involves getting random values and using the therefor we have to import random
import random
#we create our stochastic gradient descent function
def stochastic_GD(X,y_true,epochs,learning_rate=0.01):
  number_of_features=X.shape[1]
  w=np.ones(shape=(number_of_features))
  b=0
  total_samples=X.shape[0]
  cost_list=[]
  epoch_list=[]
  for i in range(epochs):
    random_index=random.randint(0,total_samples-1)
    random_sample_X=X[random_index]
    random_sample_y=y_true[random_index]
    y_predicted=np.dot(w,random_sample_X.T)+b
    w_grad=-(2/total_samples)*(random_sample_X.T.dot(random_sample_y-y_predicted))
    b_grad=-(2/total_samples)*np.sum(random_sample_y-y_predicted)
    w=w-learning_rate*w_grad
    b=b-learning_rate*b_grad

    #mean square error
    cost=np.mean(np.square(random_sample_y-y_predicted))
    #because we will be drawing graphs we have to record our epochs after ten iteration 
    if i%100==0:
      cost_list.append(cost)
      epoch_list.append(i)

  return w,b,cost,cost_list,epoch_list
w,b,cost,cost_list,epoch_list=stochastic_GD(scaled_X,scaled_y.reshape(scaled_y.shape[0],),15000)
w,b,cost
import matplotlib.pyplot as plt
plt.plot(epoch_list,cost_list)
plt.xlabel("Epochs")
plt.ylabel("Cost")
plt.title("Stochastic Gradient Descent")
#we now create a prediction function
def predictions(area,bedrooms,w,b):
  #we have to scale the input we are going to give 
  Scaled_input=sx.transform([[area,bedrooms]])[0]
  predicted_price_scaled=w[0]*Scaled_input[0]+w[1]*Scaled_input[1]+b
  #we reverse transform the Scaled input
  predicted_price=sy.inverse_transform([[predicted_price_scaled]])
  return predicted_price
predictions(2600,4,w,b)
